# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - framework_upgrade

env:
  PROJECT: OSSCSC
  AWS_REGION: eu-west-2                          # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: appeals-ecr-repo             # set this to your Amazon ECR repository name
  ECS_SERVICE: appeals                         # set this to your Amazon ECS service name
  ECS_CLUSTER: appeals_app_cluster             # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/task_definition.json      # set this to the path to your Amazon ECS task definition
                                                 # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: appeals-container            # set this to the name of the container in the
                                                 # containerDefinitions section of your task definition

jobs:
  deploy:
    name: Deploy
    runs-on: windows-latest
    strategy:
      matrix:
        dotnet-version: ['5.0']
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.                
          nuget restore
          cd OSSCSC          
          (Get-Content Web.config).replace('RDS_SERVER', '${{secrets.DB_HOST}}') | Set-Content Web.config
          (Get-Content Web.config).replace('RDS_DATABASE_NAME', 'ossc') | Set-Content Web.config
          (Get-Content Web.config).replace('RDS_USER_ID', '${{secrets.DB_USER}}') | Set-Content Web.config
          (Get-Content Web.config).replace('RDS_USER_PASSWORD', '${{secrets.DB_PASSWORD}}') | Set-Content Web.config
          #cat Web.config          
          mkdir PublishedWebSite
          msbuild $env:PROJECT.vbproj /p:TargetFrameworkVersion=v4.8 /p:Configuration=Release /p:DeployIisAppPath="Default Web Site" /p:PackageAsSingleFile=false /p:OutDir=PublishedWebSite
          docker build -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}} .          
          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}          
          echo "image=${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}" >> $Env:GITHUB_OUTPUT       
                   
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          #image: ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:${{env.IMAGE_TAG}}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
