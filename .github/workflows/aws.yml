name: Deploy to Amazon ECS

on:
  push:
    branches:
      - framework_upgrade

env:
  PROJECT: OSSCSC
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: appeals-ecr-repo
  ECS_SERVICE: appeals
  ECS_CLUSTER: tribunals-all-cluster

jobs:
  deploy:
    name: Deploy
    runs-on: windows-2019
    permissions:
      contents: write
      issues: write
      id-token: write
    strategy:
      matrix:
        dotnet-version: ['5.0']
    environment: development

    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.ACCOUNT_ID }}:role/modernisation-platform-oidc-cicd
          aws-region: ${{ env.AWS_REGION }}

      - name: Get RDS Credential
        id: get-credentials
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            appeals-db-credentials-2
          parse-json-secrets: true

      - name: Check Credentials
        id: check-credentials
        run: |
          if ( -not $env:APPEALS_DB_CREDENTIALS_2_HOST ) { 
            echo "APPEALS_DB_CREDENTIALS_2_HOST is unset"
          }
          else {
            echo "APPEALS_DB_CREDENTIALS_2_HOST is set to $env:APPEALS_DB_CREDENTIALS_2_HOST"
          }

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          nuget restore
          cd OSSCSC          
          (Get-Content Web.config).replace('RDS_SERVER', '${APPEALS_DB_CREDENTIALS_2_HOST}') | Set-Content Web.config
          (Get-Content Web.config).replace('RDS_DATABASE_NAME', '${APPEALS_DB_CREDENTIALS_2_DATABASE}') | Set-Content Web.config
          (Get-Content Web.config).replace('RDS_USER_ID', '${APPEALS_DB_CREDENTIALS_2_USERNAME}') | Set-Content Web.config
          (Get-Content Web.config).replace('RDS_USER_PASSWORD', '${APPEALS_DB_CREDENTIALS_2_PASSWORD}') | Set-Content Web.config
          #cat Web.config          
          mkdir PublishedWebSite
          msbuild $env:PROJECT.vbproj /p:TargetFrameworkVersion=v4.8 /p:Configuration=Release /p:DeployIisAppPath="Default Web Site" /p:PackageAsSingleFile=false /p:OutDir=PublishedWebSite
          docker build -t ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest .
          docker push ${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest
          echo "image=${{env.ECR_REGISTRY}}/${{env.ECR_REPOSITORY}}:latest" >> $Env:GITHUB_OUTPUT
                   
      - name: Force ecs deployment
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
